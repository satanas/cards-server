{{!< editor }}
{{#if errors}}
<div data-alert class="alert-box alert radius">
  <ul>
  {{#errors}}
  <li>{{ message}}</li>
  {{/errors}}
  </ul>
  <a href="#" class="close">&times;</a>
</div>
{{/if}}

{{#if card}}
{{#isNew}}
<h1>New card</h1>
<form id="card_form" action="/cards" method="POST" enctype="multipart/form-data">
{{/isNew}}
{{^isNew}}
<h1>Edit card</h1>

<form id="card_form" action="/cards/{{ card.id }}" method="POST" enctype="multipart/form-data">
{{/isNew}}

{{/if}}
  <div class="row">
    <div class="columns small-4">
      {{> input_field name="name" value=card.name isNew=isNew }}
      {{> input_field name="mana" value=card.mana isNew=isNew }}
      {{> input_field name="attack" value=card.attack isNew=isNew }}
      {{> input_field name="health" value=card.health isNew=isNew }}
      {{> select_field name="type" isNew=isNew values=card.types }}

      <div class="row">
        <div id="form-field-image" class="columns">
        <label>Image
          <input type="file" id="image" name="image" value="{{ card.image }}" {{#if isNew}}required{{/if}} />
        </label>
        </div>
      </div>

      <div class="row">
        <div class="columns">
        <label>Flavor Text
          <textarea rows="3" name="flavorText">{{ card.flavorText }}</textarea>
        </label>
        </div>
      </div>
    </div>

    <div class="columns small-4">
      <div id="card-details" class="preview"></div>
    </div>

    <div class="columns small-4">
      {{#card.abilities}}
        {{> select_field name=name isNew=isNew values=values}}
      {{/card.abilities}}
    </div>
  </div>
</form>

<div class="row">
  <table id="enchantments_table"></table>
  <a href="#" class="tiny button" data-reveal-id="enchantment_modal">Add enchantment</a>
</div>

<div class="row buttons">
  <button id="save_button" type="submit" class="success">Save</button>
  <button id="cancel_button" type="button">Back</button>
</div>

<!-- Enchantment modal form -->
<div id="enchantment_modal" class="reveal-modal" data-reveal aria-labelledby="New enchantment" aria-hidden="true" role="dialog">
  <div class="columns small-12" id="enchantment-div"></div>
  <a class="close-reveal-modal" aria-label="Close">&#215;</a>
</div>

<script>
$(document).foundation();

var cardModel = null,
    newImage = null,
    cardView = null,
    newEnchantment = null, // Temporary object to hold enchantment to be saved
    newEnchantmentView = null;

if (window.File && window.FileReader && window.FileList && window.Blob) {
  $('#image').on('change', function(evt) {
    var file = evt.originalEvent.target.files[0];

    if (!file.type.match('image.*')) return;

    var reader = new FileReader();
    reader.onload = function(f) {
      newImage = event.target.result;
      $('#card-details > .image > img').attr('src', newImage);
    };
    reader.readAsDataURL(file);
  });
}

$(document).ready(function() {
  enchantmentTemplate = Handlebars.compile($('#enchantment-template').html());
  Handlebars.registerPartial('input_field', Handlebars.compile($('#input-field-template').html()));
  Handlebars.registerPartial('select_field', Handlebars.compile($('#select-field-template').html()));

  cardModel = new Card({{{ card }}});
  cardView = new CardPopupView({model: cardModel, popup: false});
  cardView.render(cardModel);
  newEnchantment = new EnchantmentFormModel({form: {{{ enchantment_form }}} });
  newEnchantmentView = new EnchantmentFormView({model: newEnchantment});
  cardModel.on('change', renderEnchantments);
  renderEnchantments();

  $('#card_form').on('keyup', function(value) {
    updateModel();
  });

  /* Set select color on load */
  $('select').each(function() {
    if ($(this).val() === 'true') {
      $(this).addClass('active');
    } else {
      $(this).removeClass('active');
    }
  });

  /* Set select color on change */
  $('select').on('change', function(value) {
    updateModel();
    if ($(this).val() === 'true') {
      $(this).addClass('active');
    } else {
      $(this).removeClass('active');
    }
  });

  $('#save_button').on('click', function(ev) {
    ev.preventDefault();
    clearErrors();

    var data = new FormData($('#card_form')[0]);
    data.append('enchantments', JSON.stringify(cardModel.toJSON().enchantments));

    $.ajax($(this).attr('action'), {
      data: data,
      method: 'POST',
      processData: false,
      contentType: false,
      success: function(data) {
        if (data.redirect) {
          window.location = data.url;
        } else {
          cardModel.set(data.card);
          showMessage('success', 'Card saved successfully');
        }
      },
      error: function(data) {
        data.responseJSON.errors.forEach(function(err) {
          if (err.field !== null) {
            var field = $('#form-field-' + err.field);
            field.append('<small class="field-error error">' + err.message + '</small>');
            $('#form-field-' + err.field + ' > input').addClass('field-error');
          } else {
            showMessage('alert', err.message);
          }
        });
      }
    });
  });

  $('#cancel_button').on('click', function() {
    window.location = '/cards';
  });
});

function renderEnchantments() {
  var table = enchantmentTemplate(cardModel.toJSON());
  $('#enchantments_table').html(table);
  $('.delete-enchantment').on('click', deleteEnchantment);
}

function deleteEnchantment(ev) {
    var enchantments = cardModel.toJSON().enchantments;
    enchantments.splice(parseInt($(this).attr('data-id')), 1);
    cardModel.updateEnchantments(enchantments);
}

function updateModel() {
  var data = $('#card_form').serializeObject();
  for (var attr in data) {
    data[attr] = (data[attr] === 'true') ? true : (data[attr] === 'false' ? false : data[attr]);
  }
  cardModel.set(data);
  if (newImage) {
    $('#card-details > .image > img').attr('src', newImage);
  }
}

// TODO: Helper
function highlightErrors(errors, parent) {
  var field;
  errors.forEach(function(err) {
    if (parent) {
      field = $(parent).find('#form-field-' + err.field);
    } else {
      field = $('#form-field-' + err.field);
    }
    field.append('<small class="field-error error">' + err.message + '</small>');
    field.find('[name="' + err.field + '"]').addClass('field-error');
  });
}

// TODO: Helper
function clearErrors(parent) {
  if (parent) {
    $(parent).find('small.field-error').remove();
    $(parent).find('.field-error').removeClass('field-error');
  } else {
    $('small.field-error').remove();
    $('.field-error').removeClass('field-error');
  }
}

{{#if flash}}
showMessage('{{ flash.type }}', '{{Â flash.message }}');
{{/if}}
</script>

<script type="text/template" id="select-field-template">
{{{ templates.select_field }}}
</script>

<script type="text/template" id="input-field-template">
{{{ templates.input_field }}}
</script>

<script type="text/template" id="enchantment-form-template">
{{{ templates.enchantment_form }}}
</script>

<script type="text/template" id="enchantment-template">
{{{ templates.enchantment }}}
</script>
